package com.nhnacademy.shoppingmall.controller.index;import com.nhnacademy.shoppingmall.common.mvc.annotation.RequestMapping;import com.nhnacademy.shoppingmall.common.mvc.controller.BaseController;import com.nhnacademy.shoppingmall.common.page.Page;import com.nhnacademy.shoppingmall.product.domain.Product;import com.nhnacademy.shoppingmall.product.repository.impl.ProductRepositroyImpl;import com.nhnacademy.shoppingmall.product.service.ProductService;import com.nhnacademy.shoppingmall.product.service.impl.ProductServiceImpl;import com.nhnacademy.shoppingmall.user.domain.User;import jakarta.servlet.http.HttpServletRequest;import jakarta.servlet.http.HttpServletResponse;import jakarta.servlet.http.HttpSession;import java.util.Objects;@RequestMapping(method = RequestMapping.Method.GET,value = {"/index.do"})public class IndexController implements BaseController {    private final ProductService productService = new ProductServiceImpl(new ProductRepositroyImpl());    @Override    public String execute(HttpServletRequest req, HttpServletResponse resp) {        // 유저 가져오기        HttpSession session =  req.getSession(false);        User user = null;        if(Objects.nonNull(session)){            user = (User)session.getAttribute("loginUser");        }        req.setAttribute("user", user);        // 상품 페이징 처리해서 가져오기        try {            // 1. 현재 페이지 번호 가져오기 (없으면 1로 기본값 설정)            int currentPage = Integer.parseInt(req.getParameter("page") != null ? req.getParameter("page") : "1");            // 2. 한 페이지에 보여줄 상품 개수 설정            int pageSize = 9; // 카드 레이아웃에 맞춰 9개로 설정            // 3. 서비스를 통해 페이징된 상품 데이터 가져오기            Page<Product> productPage = productService.getPagedProducts(currentPage, pageSize);            // 4. JSP에 필요한 데이터들을 setAttribute로 추가            req.setAttribute("productList", productPage.getContent());            req.setAttribute("currentPage", currentPage);            // 5. 총 페이지 수 계산            long totalPages = (long) Math.ceil((double) productPage.getTotalCount() / pageSize);            req.setAttribute("totalPages", totalPages);        } catch (NumberFormatException e) {            // page 파라미터가 숫자가 아닐 경우의 예외 처리            // 여기서는 기본 페이지를 보여주도록 간단히 처리            Page<Product> productPage = productService.getPagedProducts(1, 9);            req.setAttribute("productList", productPage.getContent());            req.setAttribute("currentPage", 1);            long totalPages = (long) Math.ceil((double) productPage.getTotalCount() / 9);            req.setAttribute("totalPages", totalPages);        }        if(Objects.nonNull(user) && user.getUserAuth() == User.Auth.ROLE_ADMIN){            return "/shop/admin/index";        }        return "shop/main/index";    }}